{"version":3,"sources":["components/AddCategory.js","components/GridGifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","MainApp.js","index.js"],"names":["AddCategory","onadd","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cat","type","value","onChange","target","GridGifItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","request","json","response","data","map","item","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","MainApp","categories","setCategories","ReactDOM","render","document","getElementById"],"mappings":"+LAKaA,EAAc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEFC,mBAAS,IAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAiBtC,OAEI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,GAAcA,EAAWK,OAAS,IACjCP,GAAO,SAACQ,GAAD,OAAUN,GAAV,mBAAyBM,OAChCL,EAAc,OAOd,2BACIM,KAAK,OACLC,MAAOR,EACPS,SAnBc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,YCRlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACI,yBAAKC,UAAU,gEACb,yBAAKC,IAAMF,EAAMG,IAAKJ,IACtB,2BAAKA,K,uBCJFK,EAAO,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,4DACJ,mCACTN,EAFa,uDACJ,mCADI,cAEqDO,UAAUF,GAF/D,sBAGGG,MAAMR,GAHT,cAGbS,EAHa,gBAIIA,EAAQC,OAJZ,cAIbC,EAJa,yBAMZA,EAASC,KAAKC,KAAK,SAAAC,GAAS,IAAD,EAC9B,MAAO,CACHhB,GAAIgB,EAAKhB,GACTE,IAAG,UAAEc,EAAKC,cAAP,aAAE,EAAaC,iBAAiBhB,IACnCD,MAAOe,EAAKf,WAVD,2CAAH,sDCEPkB,EAAU,SAAC,GAAgB,IAG5BL,ECHgB,SAAEP,GAAe,IAAD,EAEdpB,mBAAS,CAC/B2B,KAAK,GACLM,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAoBxC,OAbAC,qBAAW,WAEPjB,EAASC,GACRiB,MAAM,SAAAC,GACHH,EAAS,CACLR,KAAMW,EACNL,SAAS,SAIlB,CAACb,IAGGc,EDjBUK,CAHkB,EAAdnB,UAGbO,KAGR,OACI,yBAAKX,UAAU,gBAEXW,EAAKC,KAAK,SAAAC,GACN,OAAO,kBAAC,EAAD,eAAaW,IAAKX,EAAKhB,IACNgB,SEgBzBY,EA5BC,WAAM,MAGkBzC,mBAAS,CAAC,QAH5B,mBAGX0C,EAHW,KAGCC,EAHD,KASlB,OACI,oCACC,2DACA,kBAAC,EAAD,CAAa5C,MAAQ4C,IACrB,6BAEA,4BAEQD,EAAWd,KAAK,SAAAC,GACb,OAAO,kBAAC,EAAD,CACKW,IAAKX,EACLT,SAAUS,UClB1Ce,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.3f89fdcf.chunk.js","sourcesContent":["import React, { useState }  from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ onadd }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue && inputValue.length > 2 ) {\r\n            onadd( (cat) => [inputValue, ...cat]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n    \r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  onadd: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from 'react'\r\n\r\nexport const GridGifItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__rubberBand animate__delay-2s\">\r\n          <img src={ url } alt={title}/>\r\n          <p>{ title }</p>\r\n        </div>\r\n    )\r\n};\r\n","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n    const apiKey = 'd5dVqDKG5ohwi0FUtI1tPEWZ6Toidte6';\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(category)}&limit=10`;\r\n    const request = await fetch(url);\r\n    const response = await request.json();\r\n\r\n    return response.data.map( item => {\r\n        return {\r\n            id: item.id,\r\n            url: item.images?.downsized_medium.url,\r\n            title: item.title\r\n        }\r\n    });\r\n};","import React from 'react'\r\nimport { GridGifItem } from './GridGifItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const { data } = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <div className=\"flex-wrapper\">\r\n          {\r\n            data.map( item => {\r\n                return <GridGifItem key={item.id} \r\n                                    {...item} />\r\n            })\r\n          }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n        .then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n};","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst MainApp = () => {\r\n\r\n    //const categories = ['One Puch', 'Zamurai'];\r\n    const [categories, setCategories] = useState(['Got']);\r\n\r\n   /*  const handleAdd = () => {\r\n        setCategories([...categories, 'beaking bad']);\r\n    }; */\r\n\r\n    return(\r\n        <>\r\n         <h2>Bienvenido a Gif Expert App</h2>\r\n         <AddCategory onadd={ setCategories } /> \r\n         <hr />\r\n         \r\n         <ul>\r\n             {\r\n                 categories.map( item => {\r\n                    return <GifGrid\r\n                                key={item} \r\n                                category={item} />\r\n                 })\r\n             }\r\n         </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport MainApp from './MainApp';\n\nReactDOM.render(\n  <MainApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}